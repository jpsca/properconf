DEFAULT_SECRETS = """# -------------------------------------------------------------------
# This is an encrypted config file in YAML language
# (https://en.wikipedia.org/wiki/YAML)
#
# Your can safely store here credentials like API keys and such,
# and commit this file to your source version control system.
# -------------------------------------------------------------------

# foo: "bar"
"""

DEFAULT_SHARED_CONFIG = """\"\"\"Shared config\"\"\"


debug = False
"""

DEFAULT_DEVELOPMENT_CONFIG = """\"\"\"Development config\"\"\"


debug = True
secret_key = "---- This is a fake secret key for development ----"
"""

DEFAULT_PRODUCTION_CONFIG = """\"\"\"Production config\"\"\"


debug = False
# secret_key = Set in secrets
"""

DEFAULT_TESTING_CONFIG = """\"\"\"Testing config\"\"\"


debug = False
secret_key = "---- This is a fake secret key for testing ----"
"""

DEFAULT_INIT = """import os
from pathlib import Path

from properconf import ConfigDict

from . import shared, development, production, testing


ENV_VAR = "APP_ENV"
ENV_FILE = ".APP_ENV"
ENVIRONMENTS = {
    "development": development,
    "production": production,
    "testing": testing,
}

def get_env(default="development"):
    env = os.getenv(ENV_VAR)
    if env:
        return env
    envfile = Path(ENV_FILE)
    if envfile.exists():
        return envfile.read_text().strip()
    return default


def load_config(env):
    config = ConfigDict()

    # Load shared config
    config.load_module(shared)

    # Load env config
    env_config = ENVIRONMENTS.get(env, production)
    config.load_module(env_config)

    # Load env secrets
    path = Path(__file__).parent
    config.load_secrets(path / env)

    return config


env = get_env()
config = load_config(env)

"""

DEFAULT_ENCRIPTED_HEADER = """# -------------------------------------------------------------
# -- DO NOT EDIT THIS FILE --
# This is an autogenerated encrypted config file.
# -------------------------------------------------------------
#
"""
